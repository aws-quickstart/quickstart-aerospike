AWSTemplateFormatVersion: 2010-09-09
Description: Template to create an Aerospike cluster on existing vpc (qs-1rpniq8qr)
Metadata: 
 QuickStartDocumentation: 
   EntrypointName: "Launch into a existing VPC"
   Order: Index a
 LintSpellExclude:
    - Aerospike
 AWS::CloudFormation::Interface:
   ParameterGroups:
     - Label: 
         default: VPC network configuration
       Parameters:
         - KeyPairName
         - VPC
         - VPCSubnet
         - Tenancy
         - NumberOfInstances
         - Cloudwatch
         - AccessCIDR
         - InstanceType
         - EBS
     - Label: 
         default: Aerospike configuration
       Parameters:
         - NamespaceFile
         - FeatureKeyFile

   ParameterLabels:
     KeyPairName:
       default: EC2 key pair
     VPC: 
       default: VPC
     VPCSubnet:
       default: List of subnet
     Tenancy:
       default: Tenancy of instance
     NumberOfInstances:
       default: Number of instances in the cluster
     Cloudwatch:
       default: Enable cloudwatch
     AccessCIDR:
       default: Permitted IP range
     InstanceType:
       default: Type of EC2 instance 
     EBS:
       default: Size of EBS volume
     NamespaceFile:
       default: Location of namespace definition
     FeatureKeyFile:
       default: Feature key file value encoded in base64

Parameters:
  KeyPairName:
    Description: Name of the KeyPair that would be used to ssh into the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: Please specify the name of the keypair that you use to login
  VPC:
    Description: Choose which VPC this cluster should be deployed to
    Type: 'AWS::EC2::VPC::Id'
  VPCSubnet:
    Description: 'List of subnet IDs, this will link instance in the VPC selected above'
    Type: 'List<AWS::EC2::Subnet::Id>'
  Tenancy:
    Description: The tenancy of your instance
    Type: String
    Default: default
    AllowedValues:
      - default
      - dedicated
  NumberOfInstances:
    Description: Number of instances in the cluster
    Type: Number
    Default: '1'
    MinValue: '1'
    MaxValue: '15'
  Cloudwatch:
    Description: >-
      Add basic Aerospike metrics to Cloudwatch. Will incur Cloudwatch expenses
      ~ $24/mo/instance
    Type: String
    Default: 'no'
    AllowedValues:
      - 'yes'
      - 'no'
  AccessCIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
    Description: "CIDR IP range permitted to access Vault. A value
      of 0.0.0.0/0 allows access from any IP address."
    Type: String
  InstanceType:
    Description: Type of EC2 instance to launch.
    Type: String
    Default: t2.large
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.18xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.12xlarge
      - r5.24xlarge
      - r5d.large
      - r5d.xlarge
      - r5d.2xlarge
      - r5d.4xlarge
      - r5d.12xlarge
      - r5d.24xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
  EBS:
    Description: >-
      Size of EBS SSD volume in GB. The volume will attach under /dev/sdg. Limit
      of 16000. Enter 0 to not use EBS.
    Type: Number
    Default: '50'
    MinValue: '0'
    MaxValue: '16000'
  NamespaceFile:
    Description: >-
      (Optional) Location of your namespace definition. Must be publically
      downloadable. Will append file directly to end of aerospike.conf
    Type: String
  FeatureKeyFile:
    Description: Base64 decode of feature-key-file
    Type: String
    Default: >-
      IyBnZW5lcmF0ZWQgMjAyMS0wMy0xMCAwNDowNDoyOAoKZmVhdHVyZS1rZXktdmVyc2lvbiAgICAgICAgICAgICAgICAgIDIKc2VyaWFsLW51bWJlciAgICAgICAgICAgICAgICAgICAgICAgIDU2ODk1MzA1OAoKYWNjb3VudC1uYW1lICAgICAgICAgICAgICAgICAgICAgRXZhbHVhdGlvbl9MaWNlbnNlCgphY2NvdW50LUlEICAgICAgICAgICAgICAgICAgICAgICBBZXJvc3Bpa2VfXzQzNTcxMTM3NAoKYXNkYi1jaGFuZ2Utbm90aWZpY2F0aW9uICAgICAgICAgdHJ1ZQphc2RiLWNsdXN0ZXItbm9kZXMtbGltaXQgICAgICAgICAxCmFzZGItY29tcHJlc3Npb24gICAgICAgICAgICAgICAgIHRydWUKYXNkYi1lbmNyeXB0aW9uLWF0LXJlc3QgICAgICAgICAgdHJ1ZQphc2RiLWxkYXAgICAgICAgICAgICAgICAgICAgICAgICB0cnVlCmFzZGItcG1lbSAgICAgICAgICAgICAgICAgICAgICAgIHRydWUKYXNkYi1zdHJvbmctY29uc2lzdGVuY3kgICAgICAgICAgdHJ1ZQptZXNnLWptcy1jb25uZWN0b3IgICAgICAgICAgICAgICB0cnVlCm1lc2cta2Fma2EtY29ubmVjdG9yICAgICAgICAgICAgIHRydWUKcHJlc3RvLWNvbm5lY3RvciAgICAgICAgICAgICAgICAgdHJ1ZQpyYWYtcmVhbHRpbWUtYW5hbHlzaXMtZnJhbWV3b3JrICB0cnVlCgotLS0tLSBTSUdOQVRVUkUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCk1FVUNJRXhGN3VSYzBZdURvb3J6ZkNUR2NhdGgrQVB6U0doUi94M21pN0RuRFB6a0FpRUF1cjkzRVcwb2tlNVoKUWZ5c1l4dzZCb0tKRUI1STVlV2xXdDU2UzlxeGNySWsKLS0tLS0gRU5EIE9GIFNJR05BVFVSRSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQo=

Mappings:
  RegionMap:
    us-east-1:
      name: ami-0f34eb039e70039ee
    us-east-2:
      name: ami-0fa09e53ae3da993c
    us-west-1:
      name: ami-0ff4e35722dc47aa0
    us-west-2:
      name: ami-06ddba8e33c6fcd06
    ca-central-1:
      name: ami-0d90d6f53ddba1537
    eu-west-1:
      name: ami-0167a18e1176a9db2
    eu-west-2:
      name: ami-05d344cb41c19d5dc
    eu-west-3:
      name: ami-03c0d5bd00773ac00
    eu-north-1:
      name: ami-00c95ceaa7ea11163
    eu-central-1:
      name: ami-0fe2ac0c12ddeb91e
    ap-southeast-1:
      name: ami-0d9fa90b17f8cac72
    ap-southeast-2:
      name: ami-04d68dfafad82a314
    ap-south-1:
      name: ami-0244bbe121ace32e6
    ap-northeast-1:
      name: ami-036e9e865b8246556
    ap-northeast-2:
      name: ami-0c7ace12c96c7403f
    ap-northeast-3:
      name: ami-0cdbd168cd6516fe6
    sa-east-1:
      name: ami-0579ef2f1b8d71dee

Conditions:
  NotUsingEBS: !Equals 
    - !Ref EBS
    - 0

Resources:
  ClusterRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - autoscaling.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AerospikeClusterPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:DescribeInstances'
                  - 'ec2:DescribeVpcAttribute'
                Resource: '*'
        - PolicyName: AerospikeCloudWatchPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'cloudwatch:PutMetricData'
                Resource: '*'
        - PolicyName: AerospikeSQSPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'sqs:*'
                Resource: !GetAtt 
                  - MigrationSQS
                  - Arn
        - PolicyName: AerospikeAutoScalingPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'autoscaling:*'
                Resource: '*'
  ClusterInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref ClusterRole
  MigrationSQS:
    Type: 'AWS::SQS::Queue'
    Properties:
      ReceiveMessageWaitTimeSeconds: 10
  MigrationHook:
    Type: 'AWS::AutoScaling::LifecycleHook'
    DependsOn: MigrationSQS
    Properties:
      AutoScalingGroupName: !Ref ClusterGroup
      LifecycleTransition: 'autoscaling:EC2_INSTANCE_TERMINATING'
      NotificationTargetARN: !GetAtt 
        - MigrationSQS
        - Arn
      RoleARN: !GetAtt 
        - ClusterRole
        - Arn
  ClusterGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref LaunchConfig
      DesiredCapacity: !Ref NumberOfInstances
      MinSize: '1'
      MaxSize: '15'
      VPCZoneIdentifier:
        - !Join 
          - ','
          - !Ref VPCSubnet
      Tags:
        - Key: StackID
          Value: !Ref 'AWS::StackId'
          PropagateAtLaunch: "true"
        - Key: Name
          Value: !Ref 'AWS::StackName'
          PropagateAtLaunch: 'true'
  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      'AWS::CloudFormation::Init':
        config:
          files:
            /opt/aerospike/cft_scripts/aerospike_init:
              content: !Join 
                - ''
                - - |
                    #!/bin/bash
                  - 'echo '
                  - !Ref FeatureKeyFile
                  - |2
                     |  base64 --decode > /etc/aerospike/features.conf
                  - |
                    rm -rf /etc/aerospike/aerospike.conf
                  - >
                    cp -r /opt/aerospike/cft_scripts/aerospike_mesh.conf
                    /etc/aerospike
                  - >
                    mv /etc/aerospike/aerospike_mesh.conf
                    /etc/aerospike/aerospike.conf
              mode: '000744'
              owner: root
              group: root
            /opt/aerospike/cft_scripts/aerospike_cluster:
              content: !Join 
                - ''
                - - |
                    #!/bin/bash
                  - >
                    echo ClusterInstancesScriptStart >
                    /var/log/awsuserdatascript
                  - |2
                      PUBLICIP=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)
                  - |2
                      CONF=/etc/aerospike/aerospike.conf
                  - '  REGION='
                  - !Ref 'AWS::Region'
                  - |+

                  - "  sed -i \"/port 3000/a \\\t\taccess-address $PUBLICIP virtual\" $CONF\n"
                  - |2
                      ###Point to all instances using the mesh-address config option
                  - '  HOSTNAMES=$(aws ec2 describe-vpc-attribute --vpc-id='
                  - !Ref VPC
                  - |2
                     --region=$REGION --attribute=enableDnsHostnames --output=text | grep ENABLEDNSHOSTNAMES | awk '{print $2}')
                  - |2
                      sleep 60 # wait for AWS to provision 
                  - |2
                      if [[ "$HOSTNAMES" == "True" ]]; then
                  - '    PRIVATEIP=$(aws ec2 describe-instances --filter Name=tag-key,Values=StackID Name=tag-value,Values='
                  - !Ref 'AWS::StackId'
                  - |2
                     --output=text --region=$REGION | grep PRIVATEIPADDRESSES | awk '{print $4}') 
                  - '  else PRIVATEIP=$(aws ec2 describe-instances --filter Name=tag-key,Values=StackID Name=tag-value,Values='
                  - !Ref 'AWS::StackId'
                  - |2
                     --output=text --region=$REGION | grep PRIVATEIPADDRESSES | awk '{print $3}') 
                  - |2
                      fi
                  - |2
                      echo $PRIVATEIP >> /var/log/awsuserdatascript
                  - |2
                      sed -i '/.*mesh-seed-address-port/d' $CONF
                  - '  for i in $PRIVATEIP; do '
                  - "    sed -i \"/interval/i \\\t\tmesh-seed-address-port $i 3002\" $CONF; done\n"
                  - '  CODE=$(curl -Is '
                  - !Ref NamespaceFile
                  - |2
                     | head -n 1 | cut -d$' ' -f2)
                  - |2
                      if [ "$CODE" != "200" ]; then echo 'Namespace File not found' >> /var/log/awsuserdatascript
                  - |2
                      else sed -i '/namespace test/,$d' $CONF
                  - '    curl -s '
                  - !Ref NamespaceFile
                  - |2
                     >> $CONF; fi
                  - |2
                      /etc/init.d/aerospike start
                  - |2
                      /etc/init.d/amc start
                  - >
                    echo OtherInstancesScriptFinish >>
                    /var/log/awsuserdatascript
                  - >
                    (crontab -l 2>/dev/null; echo '*/5 * * * *
                    /opt/aerospike/poll_sqs') | crontab -
                  - '  if [[ "'
                  - !Ref Cloudwatch
                  - |
                    " == "yes" ]]; then
                  - |2
                        (crontab -l 2>/dev/null; echo '*/5 * * * * /opt/aerospike/cloudwatch') | crontab -; fi
              mode: '000744'
              owner: root
              group: root
            /opt/aerospike/cloudwatch:
              content: !Join 
                - ''
                - - |
                    #!/bin/bash
                  - |
                    METRICS=$(asinfo -v stats -l)
                  - |
                    NAMESPACE=aerospike
                  - REGION=
                  - !Ref 'AWS::Region'
                  - |+

                  - >
                    INSTANCE=$(curl
                    169.254.169.254/latest/meta-data/instance-id)
                  - CLUSTER=
                  - !Ref 'AWS::StackId'
                  - |+

                  - |
                    for L in $METRICS; do
                  - |2
                        LINE=(${L//=/ })
                  - |2
                        case ${LINE[0]} in
                  - |2
                        cluster_integrity)
                  - |2
                            if [[ ${LINE[1]} != "true" ]]; then
                  - |2
                                INTEGRITY_ERROR=1
                  - |2
                            else
                  - |2
                                INTEGRITY_ERROR=0
                  - |2
                            fi
                  - |2
                            ;;
                  - |2
                        total-bytes-memory)
                  - |2
                            TBM=${LINE[1]}
                  - |2
                            ;;
                  - |2
                        used-bytes-memory)
                  - |2
                            UBM=${LINE[1]}
                  - |2
                            ;;
                  - |2
                        total-bytes-disk)
                  - |2
                            TBD=${LINE[1]}
                  - |2
                            ;;
                  - |2
                        used-bytes-disk)
                  - |2
                            UBD=${LINE[1]}
                  - |2
                            ;;
                  - |2
                        objects)
                  - |2
                            OBJECTS=${LINE[1]}
                  - |2
                            ;;
                  - |2
                        *)
                  - |2
                            continue
                  - |2
                            ;;
                  - |2
                        esac
                  - |
                    done
                  - |
                    FM=$(expr $TBM - $UBM)
                  - |
                    FD=$(expr $TBD - $UBD)
                  - |
                    # Submit metrics
                  - >
                    aws cloudwatch --region $REGION put-metric-data --dimensions
                    Cluster=$CLUSTER,Instance=$INSTANCE --namespace $NAMESPACE
                    --value $INTEGRITY_ERROR --metric-name 'Cluster Integrity'
                  - >
                    aws cloudwatch --region $REGION put-metric-data --dimensions
                    Cluster=$CLUSTER,Instance=$INSTANCE --namespace $NAMESPACE
                    --value $FM --metric-name 'Free Memory' --unit 'Bytes'
                  - >
                    aws cloudwatch --region $REGION put-metric-data --dimensions
                    Cluster=$CLUSTER,Instance=$INSTANCE --namespace $NAMESPACE
                    --value $FD --metric-name 'Free Disk' --unit 'Bytes'
                  - >
                    aws cloudwatch --region $REGION put-metric-data --dimensions
                    Cluster=$CLUSTER,Instance=$INSTANCE --namespace $NAMESPACE
                    --value $OBJECTS --metric-name 'Number of Objects' --unit
                    'Count'
              mode: '000744'
              owner: root
              group: root
            /opt/aerospike/poll_sqs:
              content: !Join 
                - ''
                - - |
                    #!/bin/bash
                  - |
                    # This script will prevent autoscaling from terminating
                  - |
                    # this instance until ASD migrations are completed
                  - |
                    set -e
                  - |
                    MYIP=$(curl 169.254.169.254/latest/meta-data/local-ipv4)
                  - |
                    MYNODE=$(curl 169.254.169.254/latest/meta-data/instance-id)
                  - REGION='
                  - !Ref 'AWS::Region'
                  - |
                    '   # CFT
                  - QUEUE='
                  - !Ref MigrationSQS
                  - |
                    '    # CFT
                  - HOSTNAMES=$(aws ec2 describe-vpc-attribute --vpc-id=
                  - !Ref VPC
                  - |2
                     --region=$REGION --attribute=enableDnsHostnames --output=text | grep ENABLEDNSHOSTNAMES | awk '{print $2}')
                  - |
                    if [[ "$HOSTNAMES" == "True" ]]; then
                  - '  CLUSTER=$(aws ec2 describe-instances --filter Name=tag-key,Values=StackID Name=tag-value,Values='
                  - !Ref 'AWS::StackId'
                  - |2
                     --output=text --region=$REGION | grep PRIVATEIPADDRESSES | awk '{print $4}')
                  - >-
                    else CLUSTER=$(aws ec2 describe-instances --filter
                    Name=tag-key,Values=StackID Name=tag-value,Values=
                  - !Ref 'AWS::StackId'
                  - |2
                     --output=text --region=$REGION | grep PRIVATEIPADDRESSES | awk '{print $3}')
                  - |
                    fi
                  - |
                    # Find SQS message with termination message
                  - |
                    FOUND=false
                  - >
                    MESSAGE=$(aws sqs receive-message --region  $REGION
                    --queue-url $QUEUE  --wait-time-seconds 10
                    --visibility-timeout 2 )
                  - |
                    BODY=$(echo $MESSAGE | jq '.Messages[0] .Body')
                  - >
                    RECEIPT=$(echo $MESSAGE | jq --raw-output '.Messages[0]
                    .ReceiptHandle')
                  - >
                    LIFECYCLE=$(eval echo $BODY | jq --raw-output
                    '.LifecycleTransition')
                  - >
                    INSTANCE=$(eval echo $BODY | jq --raw-output
                    '.EC2InstanceId')
                  - >
                    if [[ "$LIFECYCLE" == "autoscaling:EC2_INSTANCE_TERMINATING"
                    ]] && [[ "$INSTANCE" == "$MYNODE" ]]; then
                  - |2
                        TOKEN=$(eval echo $BODY | jq --raw-output '.LifecycleActionToken')
                  - |2
                        HOOK=$(eval echo $BODY | jq --raw-output '.LifecycleHookName')
                  - |2
                        ASG=$(eval echo $BODY | jq --raw-output '.AutoScalingGroupName')
                  - |2
                        FOUND=true
                  - |2
                        aws sqs delete-message --region $REGION --queue-url $QUEUE --receipt-handle  $RECEIPT
                  - |
                    fi
                  - |
                    # If not not found, exit
                  - |
                    if [[ $FOUND == false ]]; then
                  - |2
                        exit 0
                  - |
                    fi
                  - |
                    # stop aerospike
                  - |
                    /etc/init.d/aerospike stop
                  - |
                    # give time for cluster to react
                  - |
                    sleep 10
                  - |
                    # Find first node that's not myself
                  - |
                    for I in $CLUSTER; do
                  - |2
                        if [[ $I == $MYIP ]]; then
                  - |2
                            continue;
                  - |2
                        fi
                  - |2
                        NODE=$I
                  - |2
                        break
                  - |
                    done
                  - |
                    # Grab migration info
                  - >
                    MIGRATIONS=$(asadm -h $NODE -e 'show statistics namespace' |
                    grep migrate-[rt]x-partitions-remaining | awk '{print !$1}')
                  - |
                    DONE=true
                  - |
                    # check every node's migration status
                  - |
                    for STAT in $MIGRATIONS; do
                  - |2
                       if [[ "$STAT" != '0' ]]; then
                  - |2
                           $DONE=false
                  - |2
                           break;
                  - |2
                        fi
                  - |
                    done
                  - >
                    # if migrations not done, pause ASG actions. Otherwise,
                    continue autoscaling termination.
                  - |
                    if [[ $DONE == false ]]; then
                  - |2
                        aws autoscaling record-lifecycle-action-heartbeat --region $REGION --lifecycle-action-token $TOKEN --auto-scaling-group-name $ASG --lifecycle-hook-name $HOOK
                  - |2
                        else
                  - |2
                        aws autoscaling complete-lifecycle-action --region $REGION --lifecycle-action-token $TOKEN --lifecycle-hook-name $HOOK --auto-scaling-group-name $ASG --lifecycle-action-result CONTINUE
                  - |
                    fi
              mode: '000744'
              owner: root
              group: root
            /opt/aerospike/cft_scripts/aerospike_start:
              content: !Join 
                - ''
                - - |
                    #!/bin/bash
                  - systemctl start aerospike
              mode: '000744'
              owner: root
              group: root
          commands:
            00_aerospike_init:
              command: /opt/aerospike/cft_scripts/aerospike_init
              cwd: /opt/aerospike/cft_scripts
            01_form_asd_cluster:
              command: /opt/aerospike/cft_scripts/aerospike_cluster
              cwd: /opt/aerospike/cft_scripts
            02_aerospike_start:
              command: /opt/aerospike/cft_scripts/aerospike_start
              cwd: /opt/aerospike/cft_scripts
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      BlockDeviceMappings: !If 
        - NotUsingEBS
        - !Ref 'AWS::NoValue'
        - - DeviceName: /dev/sdg
            Ebs:
              VolumeSize: !Ref EBS
              VolumeType: gp2
      IamInstanceProfile: !Ref ClusterInstanceProfile
      ImageId: !FindInMap 
        - RegionMap
        - !Ref 'AWS::Region'
        - name
      AssociatePublicIpAddress: 'true'
      PlacementTenancy: !Ref Tenancy
      SecurityGroups:
        - !GetAtt 
          - InstanceSecurityGroup
          - GroupId
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - |
              yum update -y aws-cfn-bootstrap
            - |
              yum install -y jq
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource LaunchConfig '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource ClusterGroup '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable ports to access Aerospike
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3000'
          ToPort: '3000'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8081'
          ToPort: '8081'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref AccessCIDR
        - IpProtocol: icmp
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: StackID
          Value: !Ref 'AWS::StackId'
  InstanceSecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !GetAtt 
        - InstanceSecurityGroup
        - GroupId
      IpProtocol: tcp
      FromPort: '3001'
      ToPort: '3004'
      SourceSecurityGroupId: !GetAtt 
        - InstanceSecurityGroup
        - GroupId
    DependsOn: InstanceSecurityGroup

Outputs:
  AutoscalingID:
    Description: The Autoscaling Group ID that is used to deploy your cluster
    Value: !Ref ClusterGroup
