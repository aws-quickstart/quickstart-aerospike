AWSTemplateFormatVersion: 2010-09-09
Description: Template to create an Aerospike cluster on existing vpc (qs-1rpniq8qr)
Metadata:
  AWSAMIRegionMap:
    Filters:
      AEROSPIKEAMI:
        product-code: 26fhd0774dfi5hr7ixtngc1xx
  QuickStartDocumentation:
    EntrypointName: "Launch into a existing VPC"
    Order: Index a
  LintSpellExclude:
    - Aerospike
    - IDs
    - Linux
    - Security Group
    - namespace
    - keypair
    - sdg
    - Location
    - "aerospike.conf"
    - cloudwatch
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: VPC network configuration
        Parameters:
          - KeyPairName
          - VPCID
          - VPCCIDR
          - VPCSubnet
          - Tenancy
      - Label:
          default: Aerospike configuration
        Parameters:
           - NamespaceFile
           - FeatureKeyFile
           - NumberOfInstances
           - EnableCloudWatch
           - InstanceType
           - EBS
      - Label:
          default: Linux bastion configuration
        Parameters:
          - BastionSecurityGroupID
    ParameterLabels:
      BastionSecurityGroupID:
        default: Bastion Security Group ID
      KeyPairName:
        default: EC2 key pair
      VPCID:
        default: VPC ID
      VPCCIDR:
        default: CIDR for the VPC
      VPCSubnet:
        default: List of subnet
      Tenancy:
        default: Tenancy of instance
      NumberOfInstances:
        default: Number of instances in the cluster
      EnableCloudWatch:
        default: Enable CloudWatch for the Aerospike cluster
      InstanceType:
        default: Type of EC2 instance
      EBS:
        default: Size of EBS volume
      NamespaceFile:
        default: Location of namespace definition
      FeatureKeyFile:
        default: Feature key file value encoded in base64
Parameters:
  BastionSecurityGroupID:
    Description: ID of the bastion host Security Group (e.g., sg-7f16e910).
    Type: 'AWS::EC2::SecurityGroup::Id'
  KeyPairName:
    Description: Name of the EC2 keypair that would be used to ssh into the instances.
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: Please specify the name of the keypair that you use to login
  VPCID:
    Description: Choose which VPC this cluster should be deployed into.
    Type: 'AWS::EC2::VPC::Id'
  VPCCIDR:
    Description: VPC CIDR block, in format x.x.0.0/16.
    Type: String
    Default: 10.0.0.0/16
    ConstraintDescription: Must be in format x.x.0.0/16.
    AllowedPattern: '^([0-9]{1,3}\.){2}([0]{1}.)[0]{1}(\/[16]{2})$'
  VPCSubnet:
    Description: List of subnet IDs, this will link instance in the VPC selected above.
    Type: 'List<AWS::EC2::Subnet::Id>'
  Tenancy:
    Description: The tenancy of your instance.
    Type: String
    Default: default
    AllowedValues:
      - default
      - dedicated
  NumberOfInstances:
    Description: Number of instances in the cluster.
    Type: Number
    Default: '1'
    MinValue: '1'
    MaxValue: '15'
  EnableCloudWatch:
    Description: >-
      Add basic Aerospike metrics to CloudWatch. Will incur CloudWatch expenses.
    Type: String
    Default: 'no'
    AllowedValues:
      - 'yes'
      - 'no'
  InstanceType:
    Description: Type of EC2 instance to launch.
    Type: String
    Default: m5.large
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.18xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.12xlarge
      - r5.24xlarge
      - r5d.large
      - r5d.xlarge
      - r5d.2xlarge
      - r5d.4xlarge
      - r5d.12xlarge
      - r5d.24xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
  EBS:
    Description: |
      Size of EBS SSD volume in GB. The volume will attach under /dev/sdg. Limit
      of 16000. Enter 0 to not use EBS.
    Type: Number
    Default: '50'
    MinValue: '0'
    MaxValue: '16000'
  NamespaceFile:
    Description: >-
      (Optional) Location of your namespace definition. Must be publicly
      downloadable. Will append file directly to end of aerospike.conf.
    Type: String
    Default: ''
  FeatureKeyFile:
    Description: Base64 encoding of feature-key-file. Default key works only for 1 node cluster.
    Type: String
    Default: |
      IyBnZW5lcmF0ZWQgMjAyMS0wMy0xMCAwNDowNDoyOAoKZmVhdHVyZS1rZXktdmVyc2lvbiAgICAgICAgICAgICAgICAgIDIKc2VyaWFsLW51bWJlciAgICAgICAgICAgICAgICAgICAgICAgIDU2ODk1MzA1OAoKYWNjb3VudC1uYW1lICAgICAgICAgICAgICAgICAgICAgRXZhbHVhdGlvbl9MaWNlbnNlCgphY2NvdW50LUlEICAgICAgICAgICAgICAgICAgICAgICBBZXJvc3Bpa2VfXzQzNTcxMTM3NAoKYXNkYi1jaGFuZ2Utbm90aWZpY2F0aW9uICAgICAgICAgdHJ1ZQphc2RiLWNsdXN0ZXItbm9kZXMtbGltaXQgICAgICAgICAxCmFzZGItY29tcHJlc3Npb24gICAgICAgICAgICAgICAgIHRydWUKYXNkYi1lbmNyeXB0aW9uLWF0LXJlc3QgICAgICAgICAgdHJ1ZQphc2RiLWxkYXAgICAgICAgICAgICAgICAgICAgICAgICB0cnVlCmFzZGItcG1lbSAgICAgICAgICAgICAgICAgICAgICAgIHRydWUKYXNkYi1zdHJvbmctY29uc2lzdGVuY3kgICAgICAgICAgdHJ1ZQptZXNnLWptcy1jb25uZWN0b3IgICAgICAgICAgICAgICB0cnVlCm1lc2cta2Fma2EtY29ubmVjdG9yICAgICAgICAgICAgIHRydWUKcHJlc3RvLWNvbm5lY3RvciAgICAgICAgICAgICAgICAgdHJ1ZQpyYWYtcmVhbHRpbWUtYW5hbHlzaXMtZnJhbWV3b3JrICB0cnVlCgotLS0tLSBTSUdOQVRVUkUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCk1FVUNJRXhGN3VSYzBZdURvb3J6ZkNUR2NhdGgrQVB6U0doUi94M21pN0RuRFB6a0FpRUF1cjkzRVcwb2tlNVoKUWZ5c1l4dzZCb0tKRUI1STVlV2xXdDU2UzlxeGNySWsKLS0tLS0gRU5EIE9GIFNJR05BVFVSRSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQo=

Mappings:
  AWSAMIRegionMap:
    AMI:
      AEROSPIKEAMI: aerospike-amzn2-64bit-4.20
    us-east-1:
      AEROSPIKEAMI: ami-0d26d37a74be7c252
    us-east-2:
      AEROSPIKEAMI: ami-0f936d8bcc6004087
    us-west-1:
      AEROSPIKEAMI: ami-032ffa0a1b4f4b65f
    us-west-2:
      AEROSPIKEAMI: ami-0a0aced526dfbbae1
    ca-central-1:
      AEROSPIKEAMI: ami-0bddf972f2c0820ba
    eu-west-1:
      AEROSPIKEAMI: ami-0d979456a2ae5925b
    eu-west-2:
      AEROSPIKEAMI: ami-03b24b7f0692bd480
    eu-west-3:
      AEROSPIKEAMI: ami-09e73091d8898de7d
    eu-north-1:
      AEROSPIKEAMI: ami-08c1784f93757e8e5
    eu-central-1:
      AEROSPIKEAMI: ami-056d80514642a8881
    ap-southeast-1:
      AEROSPIKEAMI: ami-0cebefeb9b98c8ab5
    ap-southeast-2:
      AEROSPIKEAMI: ami-030ea5d03c32eb8dc
    ap-south-1:
      AEROSPIKEAMI: ami-0fe36226c616d6468
    ap-northeast-1:
      AEROSPIKEAMI: ami-07e8d017356701bf4
    ap-northeast-2:
      AEROSPIKEAMI: ami-0dc900451362789a2
    ap-northeast-3:
      AEROSPIKEAMI: ami-06ae146458d9d1dc4
    sa-east-1:
      AEROSPIKEAMI: ami-0e85ec1cd8e86df3b

Conditions:
  NotUsingEBS: !Equals 
    - !Ref EBS
    - 0

Resources:
  ClusterRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - autoscaling.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AerospikeClusterPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:DescribeInstances'
                  - 'ec2:DescribeVpcAttribute'
                Resource: '*'
        - PolicyName: AerospikeCloudWatchPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'cloudwatch:PutMetricData'
                Resource: '*'
        - PolicyName: AerospikeSQSPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'sqs:*'
                Resource: !GetAtt 
                  - MigrationSQS
                  - Arn
        - PolicyName: AerospikeAutoScalingPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'autoscaling:*'
                Resource: '*'
  ClusterInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref ClusterRole
  MigrationSQS:
    Type: 'AWS::SQS::Queue'
    Properties:
      ReceiveMessageWaitTimeSeconds: 10
  MigrationHook:
    Type: 'AWS::AutoScaling::LifecycleHook'
    Properties:
      AutoScalingGroupName: !Ref ClusterGroup
      LifecycleTransition: 'autoscaling:EC2_INSTANCE_TERMINATING'
      NotificationTargetARN: !GetAtt 
        - MigrationSQS
        - Arn
      RoleARN: !GetAtt 
        - ClusterRole
        - Arn
  ClusterGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref LaunchConfig
      DesiredCapacity: !Ref NumberOfInstances
      MinSize: '1'
      MaxSize: '15'
      VPCZoneIdentifier:
        - !Join 
          - ','
          - !Ref VPCSubnet
      Tags:
        - Key: StackID
          Value: !Ref 'AWS::StackId'
          PropagateAtLaunch: true
        - Key: Name
          Value: !Ref 'AWS::StackName'
          PropagateAtLaunch: true
  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      'AWS::CloudFormation::Init':
        config:
          files:
            /opt/aerospike/cft_scripts/aerospike_init:
              content: !Sub
                - |
                  #!/bin/bash
                  # ${Stub}
                  echo ${FeatureKeyFile} | base64 --decode > /etc/aerospike/features.conf
                  rm -rf /etc/aerospike/aerospike.conf
                  cp -r /opt/aerospike/cft_scripts/aerospike_mesh.conf /etc/aerospike
                  mv /etc/aerospike/aerospike_mesh.conf /etc/aerospike/aerospike.conf
                - Stub: A
              mode: '000744'
              owner: root
              group: root
            /opt/aerospike/cft_scripts/aerospike_cluster:
              content: !Join 
                - ''
                - - |
                    #!/bin/bash
                  - >
                    echo ClusterInstancesScriptStart >
                    /var/log/awsuserdatascript
                  - |2
                      PRIVATE_IP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)
                  - |2
                      CONF=/etc/aerospike/aerospike.conf
                  - "  sed -i \"/port 3000/a \\\t\taccess-address $PRIVATE_IP virtual\" $CONF\n"
                  - |2
                      ###Point to all instances using the mesh-address config option
                  - |2
                      sleep 60 # wait for AWS to provision 
                  - '  PRIVATEIP=$(aws ec2 describe-instances --filter Name=tag-key,Values=StackID Name=tag-value,Values='
                  - !Ref 'AWS::StackId'
                  - ' --output=text --region='
                  - !Ref 'AWS::Region'
                  - |2
                     | grep PRIVATEIPADDRESSES | awk '{print $4}') 
                  - |2
                      echo $PRIVATEIP >> /var/log/awsuserdatascript
                  - |2
                      sed -i '/.*mesh-seed-address-port/d' $CONF
                  - '  for i in $PRIVATEIP; do '
                  - "    sed -i \"/interval/i \\\t\tmesh-seed-address-port $i 3002\" $CONF; done\n"
                  - '  CODE=$(curl -Is '
                  - !Ref NamespaceFile
                  - |2
                     | head -n 1 | cut -d$' ' -f2)
                  - |2
                      if [ "$CODE" != "200" ]; then echo 'Namespace File not found' >> /var/log/awsuserdatascript
                  - |2
                      else sed -i '/namespace test/,$d' $CONF
                  - '    curl -s '
                  - !Ref NamespaceFile
                  - |2
                     >> $CONF; fi
                  - |2
                      systemctl restart aerospike
                  - >
                    echo OtherInstancesScriptFinish >>
                    /var/log/awsuserdatascript
                  - >
                    (crontab -l 2>/dev/null; echo '*/5 * * * *
                    /opt/aerospike/poll_sqs') | crontab -
                  - '  if [[ "'
                  - !Ref EnableCloudWatch
                  - |
                    " == "yes" ]]; then
                  - |2
                        (crontab -l 2>/dev/null; echo '*/5 * * * * /opt/aerospike/cloudwatch') | crontab -; fi
              mode: '000744'
              owner: root
              group: root
            /opt/aerospike/cloudwatch:
              content: !Sub
                - |
                  #!/bin/bash
                  METRICS=$(asinfo -v stats -l)
                  NAMESPACE=aerospike

                  INSTANCE=$(curl 169.254.169.254/latest/meta-data/instance-id)
                  CLUSTER="${AWS::StackId}"
                  for L in $METRICS; do
                    # The ! in the following is to allow for a literal $ { in !Sub - https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-sub.html
                    LINE=(${!L//=/ })
                    case ${!LINE[0]} in
                      cluster_integrity)
                        if [[ ${!LINE[1]} != "true" ]]; then
                          INTEGRITY_ERROR=1
                        else
                          INTEGRITY_ERROR=0
                        fi
                      ;;
                      total-bytes-memory)
                        TBM=${!LINE[1]}
                      ;;
                      used-bytes-memory)
                        UBM=${!LINE[1]}
                      ;;
                      total-bytes-disk)
                        TBD=${!LINE[1]}
                      ;;
                      used-bytes-disk)
                        UBD=${!LINE[1]}
                      ;;
                      objects)
                        OBJECTS=${!LINE[1]}
                      ;;
                      *)
                        continue
                      ;;
                    esac
                  done
                  FM=$(expr $TBM - $UBM)
                  FD=$(expr $TBD - $UBD)
                  # Submit metrics
                  aws cloudwatch --region ${REGION} put-metric-data --dimensions Cluster=$CLUSTER,Instance=$INSTANCE --namespace $NAMESPACE --value $INTEGRITY_ERROR --metric-name 'Cluster Integrity'
                  aws cloudwatch --region ${REGION} put-metric-data --dimensions Cluster=$CLUSTER,Instance=$INSTANCE --namespace $NAMESPACE --value $FM --metric-name 'Free Memory' --unit 'Bytes'
                  aws cloudwatch --region ${REGION} put-metric-data --dimensions Cluster=$CLUSTER,Instance=$INSTANCE --namespace $NAMESPACE --value $FD --metric-name 'Free Disk' --unit 'Bytes'
                  aws cloudwatch --region ${REGION} put-metric-data --dimensions Cluster=$CLUSTER,Instance=$INSTANCE --namespace $NAMESPACE --value $OBJECTS --metric-name 'Number of Objects' --unit 'Count'
                - REGION: !Sub "${AWS::Region}"
              mode: '000744'
              owner: root
              group: root
            /opt/aerospike/poll_sqs:
              content: !Sub
                - |
                  #!/bin/bash
                  # This script will prevent autoscaling from terminating
                  # this instance until ASD migrations are completed
                  set -e
                  MYIP=$(curl 169.254.169.254/latest/meta-data/local-ipv4)
                  MYNODE=$(curl 169.254.169.254/latest/meta-data/instance-id)

                  # CFT
                  QUEUE=${MigrationSQS}
                  # CFT
                  HOSTNAMES=$(aws ec2 describe-vpc-attribute --vpc-id=${VPCID} --region=${REGION} --attribute=enableDnsHostnames --output=text | grep ENABLEDNSHOSTNAMES | awk '{print $2}')
                  if [[ "$HOSTNAMES" == "True" ]]; then
                    CLUSTER=$(aws ec2 describe-instances --filter Name=tag-key,Values=StackID Name=tag-value,Values='${AWS::StackId} --output=text --region=${REGION} | grep PRIVATEIPADDRESSES | awk '{print $4}')
                  else
                    CLUSTER=$(aws ec2 describe-instances --filter Name=tag-key,Values=StackID Name=tag-value,Values=${AWS::StackId} --output=text --region=${REGION} | grep PRIVATEIPADDRESSES | awk '{print $3}')
                  fi

                  # Find SQS message with termination message
                  FOUND=false
                  MESSAGE=$(aws sqs receive-message --region ${REGION} --queue-url $QUEUE  --wait-time-seconds 10 --visibility-timeout 2 )
                  BODY=$(echo $MESSAGE | jq '.Messages[0] .Body')
                  RECEIPT=$(echo $MESSAGE | jq --raw-output '.Messages[0].ReceiptHandle')
                  LIFECYCLE=$(eval echo $BODY | jq --raw-output '.LifecycleTransition')
                  INSTANCE=$(eval echo $BODY | jq --raw-output '.EC2InstanceId')
                  if [[ "$LIFECYCLE" == "autoscaling:EC2_INSTANCE_TERMINATING" ]] && [[ "$INSTANCE" == "$MYNODE" ]]; then
                        TOKEN=$(eval echo $BODY | jq --raw-output '.LifecycleActionToken')
                        HOOK=$(eval echo $BODY | jq --raw-output '.LifecycleHookName')
                        ASG=$(eval echo $BODY | jq --raw-output '.AutoScalingGroupName')
                        FOUND=true
                        aws sqs delete-message --region ${REGION} --queue-url $QUEUE --receipt-handle  $RECEIPT
                  fi

                  # If not not found, exit
                  if [[ $FOUND == false ]]; then
                    exit 0
                  fi

                  # stop aerospike
                  /etc/init.d/aerospike stop

                  # give time for cluster to react
                  sleep 10

                  # Find first node that's not myself
                  for I in $CLUSTER; do
                    if [[ $I == $MYIP ]]; then
                      continue;
                    fi

                    NODE=$I
                    break
                  done

                  # Grab migration info
                  MIGRATIONS=$(asadm -h $NODE -e 'show statistics namespace' | grep migrate-[rt]x-partitions-remaining | awk '{print !$1}')
                  DONE=true
                  # check every node's migration status
                  for STAT in $MIGRATIONS; do
                    if [[ "$STAT" != '0' ]]; then
                      $DONE=false
                      break;
                    fi
                  done

                  # if migrations not done, pause ASG actions. Otherwise, continue autoscaling termination.
                  if [[ $DONE == false ]]; then
                    aws autoscaling record-lifecycle-action-heartbeat --region ${REGION} --lifecycle-action-token $TOKEN --auto-scaling-group-name $ASG --lifecycle-hook-name $HOOK
                  else
                    aws autoscaling complete-lifecycle-action --region ${REGION} --lifecycle-action-token $TOKEN --lifecycle-hook-name $HOOK --auto-scaling-group-name $ASG --lifecycle-action-result CONTINUE
                  fi
                - REGION: !Sub "${AWS::Region}"
              mode: '000744'
              owner: root
              group: root
            /opt/aerospike/cft_scripts/aerospike_start:
              content: !Sub
                - |
                  #!/bin/bash
                  systemctl start ${Service}
                - Service: aerospike
              mode: '000744'
              owner: root
              group: root
          commands:
            00_aerospike_init:
              command: /opt/aerospike/cft_scripts/aerospike_init
              cwd: /opt/aerospike/cft_scripts
            01_form_asd_cluster:
              command: /opt/aerospike/cft_scripts/aerospike_cluster
              cwd: /opt/aerospike/cft_scripts
            02_aerospike_start:
              command: /opt/aerospike/cft_scripts/aerospike_start
              cwd: /opt/aerospike/cft_scripts
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      BlockDeviceMappings: !If 
        - NotUsingEBS
        - !Ref 'AWS::NoValue'
        - - DeviceName: /dev/sdg
            Ebs:
              VolumeSize: !Ref EBS
              VolumeType: gp2
      IamInstanceProfile: !Ref ClusterInstanceProfile
      ImageId: !FindInMap 
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - AEROSPIKEAMI
      AssociatePublicIpAddress: true
      PlacementTenancy: !Ref Tenancy
      SecurityGroups:
        - !GetAtt 
          - InstanceSecurityGroup
          - GroupId
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash -xe
            yum update -y aws-cfn-bootstrap
            yum install -y jq

            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfig --region ${Region}

            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ClusterGroup --region ${Region}
          - Region: !Sub "${AWS::Region}"
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable ports to access Aerospike
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: !Ref VPCCIDR
        - IpProtocol: tcp
          FromPort: 8081
          ToPort: 8081
          CidrIp: !Ref VPCCIDR
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroupID
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: !Ref VPCCIDR
      Tags:
        - Key: StackID
          Value: !Ref 'AWS::StackId'
  InstanceSecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !GetAtt 
        - InstanceSecurityGroup
        - GroupId
      IpProtocol: tcp
      FromPort: 3001
      ToPort: 3004
      SourceSecurityGroupId: !GetAtt 
        - InstanceSecurityGroup
        - GroupId
Outputs:
  AutoscalingID:
    Description: The Autoscaling Group ID that is used to deploy your cluster
    Value: !Ref ClusterGroup
